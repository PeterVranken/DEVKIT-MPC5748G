//
// symbols.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// The names of the symbols in the C files are provided. They can be addressed by brief
// but meaningful names from superordinated templates but will nonetheless have all
// required disambiguation syllables in the C code, which are appropriate. This hiding of
// details makes the superordinated templates much better readable and maintainable.
//
// Copyright (C) 2015-2021 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"


// Repeatedly used file names are held in this map. All code generation templates will use
// the map when referencing to files and fragments of their names (particularly the module
// prefixes). Modifications of generated file names can be done easily and consistent.
file ::= [ "baseTypes_h": "types.h"
         , "mnmApi": "cap"
         , "canApi": {<file.mnmApi>_canApi}
         , "canApi_h": {<file.canApi>.h}
         , "canApi_c": {<file.canApi>.c}
         , "canApiPreco_h": {<file.mnmApi>_precoCheck.h}
         , default: "codeGenerationError_unknownFileName"
         ]

// The repeatedly used names of generated functions. The typical objects, which are
// required for name disambiguation are addressed by scoping under the usual names.
fct ::= [ "packFrame": {<file.mnmApi>_pack_<bus.name>_<pdu.name>_<pduId()>}
        , "packApiFrame": {<file.mnmApi>_packApi_<bus.name>_<pdu.name>_<pduId()>}
        , "unpackFrame": {<file.mnmApi>_unpack_<bus.name>_<pdu.name>_<pduId()>}
        , "unpackApiFrame": {<file.mnmApi>_unpackApi_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eProtectFrame": {e2e_protect_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eProtectApiFrame": {e2e_protectApi_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eCheckFrame": {e2e_check_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eRndFillFrame": {e2e_randomFill_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eRndFillApiFrame": {e2e_randomFillApi_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eRndFillProtectAndPackFrame": {e2e_randomFillProtectAndPack_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eUnpackAndCheckFrame": {e2e_unpackAndCheck_<bus.name>_<pdu.name>_<pduId()>}
        , "oseUnpackAndCheckFrame": {ose_unpackAndCheck_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eUnpackAndCheckApiFrame": {e2e_unpackApiAndCheck_<bus.name>_<pdu.name>_<pduId()>}
        , "e2eTestFrame": {e2e_randomTest_<bus.name>_<pdu.name>_<pduId()>}
        , default: "codeGenerationError_unknownFunction"
        ]

// The repeatedly used symbol names of different data objects used in the CAN API. The
// typical objects, which are required for name disambiguation are addressed by scoping
// under the usual names.
symbol ::= [ "signal": {<signal><if(signal.isMuxedSignal)>_m<signal.muxValue><endif>}
           , "sigObjBus": {canBus_<bus>}
           , "busObjBus": {<file.mnmApi>_<symbol.sigObjBus>_t}
           , "structBus": {<file.mnmApi>_<symbol.sigObjBus>}
           , "structBus_t": {<symbol.busObjBus>}
           , "sigObjFrame": {<bus>_<frame>_<frameId()>}
           , "busObjFrame": {<file.mnmApi>_<symbol.sigObjFrame>_t}
           , "structFrame_t": {<symbol.busObjFrame>}
           , "sigObjFrameSts": {<symbol.sigObjFrame>_sts}
           , "busObjFrameSts": {<file.mnmApi>_<symbol.sigObjFrameSts>_t}
           , "structFrameSts": {<symbol.sigObjFrameSts>}
           , "structFrameSts_t": {<symbol.busObjFrameSts>}
           , "structInfoTransmission_t": {<file.mnmApi>_infoTransmission_t}
           , "fieldSignals": "signals"
           , "fieldInfoTransmission": "infoTransmission"
           , "fieldStsTransmission": "stsTransmission"
           , "fieldNoTransmitted": "noTransmittedFrames"
           , "fieldIsEvent": "isEvent"
           , "stsTransmission_t": {<file.mnmApi>_stsTransmission_t}
           , "stsTransmission": {<symbol.structBus>.<symbol.structFrameSts>.<symbol.fieldStsTransmission>}
           , "enumSendMode": {<file.mnmApi>_enumSendMode}
           , "enumSendMode_t": {<symbol.enumSendMode>_t}
           , default: "codeGenerationError_unknownSymbol"
           ]

// The repeatedly used frame and signal related #define's are access through a map, which
// improves maintainability and readability of the templates.
define ::= [ "busId": {OSE_CAN_BUS_<bus.name; format="upper">}
           , "signalBinToDbl": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<FRAME_ID()>_<signal.name; format="upper">_BIN_TO_DBL}
           , "signalDblToBin": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<FRAME_ID()>_<signal.name; format="upper">_DBL_TO_BIN}
           , "signalFactor": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<FRAME_ID()>_<signal.name; format="upper">_FACTOR}
           , "signalOffset": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<FRAME_ID()>_<signal.name; format="upper">_OFFSET}
           , "signalMin": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<FRAME_ID()>_<signal.name; format="upper">_MIN}
           , "signalMax": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<FRAME_ID()>_<signal.name; format="upper">_MAX}
           , "aliasOfStructFrame": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>}
           , "referenceStructFrame": {<file.mnmApi>_getFrame_<bus>_<frame>_<frameId()>}
           , "referenceStructFrameSts": {<file.mnmApi>_getFrameSts_<bus>_<frame>_<frameId()>}
           , "referenceSignalOfStructFrame": {<file.mnmApi>_getSignal_<bus>_<frame>_<frameId()>}
           , "pduSize": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_DLC}
           , "checksumLength": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_CHECKSUM_LENGTH}
           , "checksumStartBit": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_CHECKSUM_STARTBIT}
           , "checksumIsMotorola": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_CHECKSUM_IS_BIG_ENDIAN}
           , "checksumDataId": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_CHECKSUM_START_VALUE}
           , "sqcLength": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_SQC_LENGTH}
           , "sqcFrom": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_SQC_FROM}
           , "sqcTo": {<file.mnmApi; format="upper">_<bus.name; format="upper">_<frame.name; format="upper">_<FRAME_ID()>_SQC_TO}
           , default: "codeGenerationError_badDefine"
           ]

// Two helper templates disambiguate 11 and 29 Bit CAN IDs.
frameId() ::= "<if(frame.isExtId)>x<endif><frame.id>"
FRAME_ID() ::= "<if(frame.isExtId)>X<endif><frame.id>"
pduId() ::= "<if(pdu.isExtId)>x<endif><pdu.id>"
