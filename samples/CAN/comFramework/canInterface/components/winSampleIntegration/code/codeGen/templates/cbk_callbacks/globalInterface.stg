//
// globalInterface.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// The templates describe the generation of the APSW interface, i.e. the structs, which
// contain the unpacked signals.
//
// Copyright (C) 2015 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

import "../lib/typeMap.stg"
import "../lib/iterations.stg"
import "symbols.stg"

typedefStsTransmission() ::= <<
/** The different status bits of the CAN transmission status word. */
typedef enum cbk_enumStsTransmission_t
{
    /** No bit is set, no error or problem or else is reported. */
    cbk_stsTransm_okay = 0,

    /** The frame has never been received since startup of the interface. Only for inbound
        frames. */
    cbk_stsTransm_neverReceived = 1,

    /** The frame could not be send, send buffer full. Only for outbound frames. */
    cbk_stsTransm_errSendBufferFull = 1,
    
    /** The frame has not been received timely. */
    cbk_stsTransm_errTimeout = 2,

    /** The received frame has a data error; the checksum doesn't match. No signals will be
        extracted. */ 
    cbk_stsTransm_errChecksum = 4,

    /** The sequence counter of the received frame indicates a lost frame. */
    cbk_stsTransm_errSequence = 8,

    /** The received frame doesn't have the expected size. No signals can be extracted. */
    cbk_stsTransm_errDLC = 16

} cbk_enumStsTransmission_t;


/** The type of the transmission status. The encoding of the information is done bit-wise,
    see enumeration \a cbk_enumStsTransmission_t. The status variable is neither defined as an
    enumeration nor as a bit field in order to permit the use of binary operations to
    filter and combine status bits. */
typedef <bt("uint8_t")> <symbol.stsTrans_t>;
<\n>
>> // End of template typedefStsTransmission


// The list of typedefs of API and frame structs, to be used in the global interface of the
// CAN code.
listOfTypedefsStructFrame(cluster) ::= <<
<iterateFramesOfCluster(cluster,"both","typedefStructFrame")><\\>
<iterateFramesOfCluster(cluster,"both","typedefStructAPIFrame")>
>>


// The list of declarations of the global frame structs, which serve as API to the APSW.
listOfStructFrameDecls(cluster) ::= <<
<iterateFramesOfCluster(cluster,"both","structAPIFrameDecl")>
>>


// The list of definitions of the global frame structs, which serve as API to the APSW.
listOfStructFrameDefs(cluster) ::= <<
<iterateFramesOfCluster(cluster,"both","structAPIFrameDef")>
>>


// The typedef of the struct, which serves as API to access the frame related information.
// Mainly signals but also some status information.
typedefStructAPIFrame(frame) ::= <<
/** Signals and transmission status of CAN frame <frame> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus>.
    A global variable of this type is used as API between CAN interface and APSW. */
typedef <structAPIFrame(frame)> <symbol.structAPIFrame_t>;

<\n>
>>


// The declaration of the (global) struct, which serves as API to access the frame related
// information.
structAPIFrameDecl(frame) ::= <<
/** Signals and transmission status of CAN frame <frame> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus>.
    This global variable is used as API between CAN interface and APSW. */
extern <symbol.structAPIFrame_t> <symbol.structAPIFrame>;
<\n>
>>


// The definition of the (global) struct, which serves as API to access the frame related
// information.
structAPIFrameDef(frame) ::= <<
/** Signals and transmission status of CAN frame <frame> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus>.
    This global variable is used as API between CAN interface and APSW. */
<symbol.structAPIFrame_t> <symbol.structAPIFrame> =
{
    .signals =
    <structFrameInitializer(frame)>,

    .stsTransmission = <if(frame.isReceived)>cbk_stsTransm_neverReceived<else>cbk_stsTransm_okay<endif>
};

<\n>
>>


// The definition of the struct, which serves as API to access the frame related
// information. Mainly signals but also some status information.
structAPIFrame(frame) ::= <<
struct <symbol.structAPIFrame_t>
{
    /** The collection of signals of the frame. */
    <symbol.structFrame_t> signals;

    /** The transmission status. */
    <symbol.stsTrans_t> stsTransmission;

}
>> // End of template structAPIFrame


// The typedef of the struct, which collects and declares all signals of a frame.
typedefStructFrame(frame) ::= <<
/** The signals of CAN frame <frame> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus>. */
typedef <structFrame(frame)> <symbol.structFrame_t>;

<\n>
>>


// The struct definition, which collects and declares all signals of a frame.
structFrame(frame) ::= <<
struct <symbol.structFrame_t>
{
    <iterateSignalsOfFrame(frame,"all","all","signalDecl")><\\>
}
>> // End of template structFrame


// The constant initializer expression for the inner struct of signals.
structFrameInitializer(frame) ::= <<
{
    <iterateSignalsOfFrame(frame,"all","all","signalInitializer")><\\>
}
>>
        

// The declaration of a single signal.
//   The conditional optimization not to handle signals, which are not related to the
// network node, we generate code for, is weak: The user can by define demand to get
// pack/unpack functions for all frames and then we need the interface variables at least
// for the pack function. So we just add a comment here.
signalDecl(signal,kind) ::= <<
/** Signal <signal><if(strcmpMuxSel.(kind))> (mux selector)<elseif(strcmpMuxed.(kind))> (muxed)<endif>. */
<bt(signal.type)> <symbol.signal>;<\\>
<if(info.optionMap.suppressUnaffectedSignals && !signal.isReceived && !pdu.isSent)> /* Signal is not used by node <cluster.nodeName>. */<endif>
<\n>
>>


// A constant initializer expression for a signal.
signalInitializer(signal,kind) ::= <<
.<symbol.signal><if(signal.attribMap.initialValue)> = <initialValue(signal)><else> = 0 <\\>
/* Initial value not found in database; check signal attribute "initialValue" */<\\>
<endif>,<\n>
>>


// Generate the initial binary value of a (scaled) signal from its DBC specified world value.
initialValue(signal) ::= <<
<if(signal.isVoidScaling)><signal.attribMap.initialValue.n; format="%.0f"><else>(<bt(signal.type)>)((<signal.attribMap.initialValue.n><if(signal.unit)> /* <signal.unit> */<endif> - <signal.offset>) / <signal.factor>)<endif>
>>
