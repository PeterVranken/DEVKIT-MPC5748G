//
// processes_ld.stg
//
// This is a template group file for StringTemplate V4, see www.stringtemplate.org. It is
// applied to generate the repetitive parts of the linker script, i.e. those elements,
// which are needed for each process. The use of a template avoids typical errors by slip
// of the pen.
//   Considerations:
//   Main requirement is the limit of having no more than three memory chunks per process.
// Most common would be six: normal addressing, SDA and SDA2 addressing, each with data and
// bss. We can reduce this to three by placing the data and bss parts immediately one after
// another so that both together form one chunk. Now we have one chunk for normal, SDA and
// SDA2 addressed data.
//   Normally, one has one output section per normal/SDA/SDA2 addressing and data/bss, i.e.
// six output sections. This is a contradiction to having alternating data and bss per
// process. We use dedicated output sections for each process, i.e. we'd basically have six
// different output sections per process. At this point, we reach a technical limitation.
//   The linker allows repeatedly using the same output section names. We can have this
// sequence of output sections: .data (for P1), .bss (for P1), .data (for P2), .bss (for
// P2), ... However, the linker understands this as disrupted definition of one and the
// same output section; it'll produce one .data and .bss and the data and bss elements of
// one particular process don't form a single contiguous chunk of memory as we require.
// Effectively, the linker reorders the input sections with respect to their appearance in
// the linker script.
//   To get the needed ordering, we use different output section names by appending the
// process designation, e.g. .data.P1. Now the linker decides for different output sections
// and it places them into memory in order of appearance in the linker script. This is the
// desired memory layout.
//   The next technical limitation applies to the SDA sections only. If we rename the
// output sections, e.g. .sdata.P1, then the linker does no longer identify the output
// section as SDA addressed and it refuses resolving according machine instructions (SDA21
// relocation error). We can't have more than one SDA addressed output section for data and
// bss.
//   The only way to still get adjacent data and bss memory chunks per process is placing
// both into the same output section, and - because of the data initialization requirement
// - this needs to be the data section. We don't use the bss output sections for SDA
// addressed data but place all data and all bss input sections into the data output
// section.
//   The unavoidable drawback is the waste of ROM space for the section image. All SDA
// addressed bss data is now part of the initialized data section and the image of the
// section in ROM grows accordingly. In the worst case this means a loss of ROM of 2*64k.
// In practice, it'll be much less as a good portion of the SDA data objects will anyway be
// initialized.
//
// Copyright (C) 2020 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

//import ".stg"

// This template selects the only worksheet in the workbook for rendering. As long as this
// suffices the template can be used without change. You would need to change this template
// otherwise; you could e.g. address to particular worksheets by name. See documentation of
// class cluster in the data model describing Javadoc. Common alternatives are:
//   <renderSheet(cluster.theOnlyWorkbook.myParticularWorksheet)>
//   <renderSheet(cluster.myParticularWorkbook.myParticularWorksheet)>
processRAM_ld(cluster,info) ::= <<
<renderOutputSections(cluster.theOnlyWorksheet)>
>>
processRAMInitAry_ld(cluster,info) ::= <<
<renderInitRAMAry(cluster.theOnlyWorksheet)>
>>


// The standard (byte) alignments for different conditions.
mpuAlign() ::= "16" // Alignment for MPU sections
initDataAlign() ::= "4" // Alignment for data section initialization in startup code


renderOutputSections(sheet) ::= <<
/*
 * This sub-ordinated linker script file specifies the RAM partitioning for the processes.
 *   It has been generated from the information in spreadsheet <sheet.excelFile>, worksheet
 * <sheet.name_>.
 *
 * Copyright (C) 2017-<info.year> Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see \<http://www.gnu.org/licenses/>.
 */
.data : ALIGN(<mpuAlign()>)
{
    /* Data sections for kernel and trusted I/O driver code. */
    . = ALIGN(<mpuAlign()>);
    *_OS_*.o(.data)
    *_OS_*.o(.data.*)
    *(.data.OS)
    *(.data.OS.*)
    . = ALIGN(<mpuAlign()>);

    /* Data sections, which are shared between all processes. */
    . = ALIGN(<mpuAlign()>);
    ld_dataSharedStart = ABSOLUTE(.);
    *_Shared_*.o(.data)
    *_Shared_*.o(.data.*)
    *(.data.Shared)
    *(.data.Shared.*)
    *_Shared_*.o(.bss)
    *_Shared_*.o(.bss.*)
    *(.bss.Shared)
    *(.bss.Shared.*)

    . = ALIGN(<mpuAlign()>);
    ld_dataSharedEnd = ABSOLUTE(.);

    /* Our ROM to RAM copy routine in the startup code copies always 4 Byte at once.
       The end address of any area to copy should thus be a multiple of 4. */
    . = ALIGN(<initDataAlign()>);

} >memData AT>memFlash

.bss (NOLOAD) : ALIGN(<mpuAlign()>)
{
    /* Uninitialized data sections for kernel and trusted I/O driver code. */
    *_OS_*.o(.bss)
    *_OS_*.o(.bss.*)
    *(.bss.OS)
    *(.bss.OS.*)

    /* The OS stacks. Each core has its own one. The startup code requires that all of
       them are located in the address range from ld_stackStartOSAllCores till
       ld_stackEndOSAllCores. */
    . = ALIGN(8); /* Stacks need to be 8 Byte aligned.  */
    ld_stackStartOSAllCores = ABSOLUTE(.);
    
    ld_stackStartOSCore2 = ABSOLUTE(.);
    . += ld_stackSizeOSCore2;
    . = ALIGN(8);
    ld_stackEndOSCore2 = ABSOLUTE(.);

    ld_stackStartOSCore1 = ABSOLUTE(.);
    . += ld_stackSizeOSCore1;
    . = ALIGN(8);
    ld_stackEndOSCore1 = ABSOLUTE(.);

    ld_stackStartOSCore0 = ABSOLUTE(.);
    . += ld_stackSizeOSCore0;
    . = ALIGN(8);

    /* The end of the stack would normally 8 Byte aligned. We extend the alignment to
       already fit the constraints of the next section; this way the required fill
       bytes contribute to our stack instead of being wasted. */
    ld_noBitsDmaRingBuffer = ABSOLUTE(10);/* The size in Bit of the ring buffer used for
                                             serial output. */
    . = ALIGN(1 \<\< ld_noBitsDmaRingBuffer);

    ld_stackEndOSCore0 = ABSOLUTE(.); /* Stack end behind alignment operation. */

    /* End of stack area for all the OS stacks. */
    ld_stackEndOSAllCores = ABSOLUTE(.);
    
    /* The DMA ring buffer for serial output has a very high alignment requirement:
       log2(sizeOfBuffer) least significant bits need to be zero in its address. If we
       align after the stack area then the gap is not lost but becomes additional heap
       space.
         Note, the section alignment hard-coded here in the file therefore limits the
       size of the buffer, which is chosen in the C source code. Assertions in the C
       code are required to ensure the crosswise consistency of C source code and
       linker control file. */
    *sio_serialIO.o(.sio_bss)
    *sio_serialIO.o(.sio_bss.*)

    *(COMMON)

} >memData


<sheet.rowAry:dataProcess()><\\>

/* Order of small data sections: The two sX and the two sX2, X meaning bss or data,
   should be close together since they use the same _SDA_BASE_ pointer, or _SDA2_BASE_,
   respectively. */
.sbss (NOLOAD) : ALIGN(<mpuAlign()>)
{
    /* We should explicitly set the beginning of the SDA area. If we don't do then the
       default setting is the address of the first section, which matches *(.sdata.*).
       If we want to apply terms that filter for specific file names then these have to
       precede *(.sdata.*) and the SDA section of the file would actually be outside
       the SDA area. */
    _SDA_BASE_ = . + 0x8000;
    __SDATA_START__ = . ;

    /* Small, uninitialized data sections for kernel and trusted I/O driver code. */
    ld_sbssOSStart = ABSOLUTE(.);
    *_OS_*.o(.sbss)
    *_OS_*.o(.sbss.*)
    *(.sbss.OS)
    *(.sbss.OS.*)
    ld_sbssOSEnd = ABSOLUTE(.);

} >memData

.sdata : ALIGN(<mpuAlign()>)
{
    /* Small data sections for kernel and trusted I/O driver code. */
    . = ALIGN(<mpuAlign()>);
    ld_sdataOSStart = ABSOLUTE(.);
    *_OS_*.o(.sdata)
    *_OS_*.o(.sdata.*)
    *(.sdata.OS)
    *(.sdata.OS.*)
    . = ALIGN(<mpuAlign()>);
    ld_sdataOSEnd = ABSOLUTE(.);

    <sheet.rowAry:sdataProcess()>
    /* No further input section filters must be placed down here: The filters for process
       P1 are very open and, effectively, they will place all the unparticular rest into
       process P1. Additional filters will not likely catch anything. */

    /* Our ROM to RAM copy routine in the startup code copies always 4 Byte at once.
       The end address of any area to copy should thus be a multiple of 4. */
    . = ALIGN(<initDataAlign()>);

} >memData AT>memFlash


/* Order of small data sections: The two sX and the two sX2, X meaning bss or data,
   should be close together since they use the same _SDA_BASE_ pointer, or _SDA2_BASE_,
   respectively. */
.sbss2 (NOLOAD) : ALIGN(<mpuAlign()>)
{
    /* We should explicitly set the beginning of the SDA2 area. If we don't do then the
       default setting is the address of the first section, which matches *(.sdata2.*).
       If we want to apply terms that filter for specific file names then these have to
       precede *(.sdata2.*) and the SDA section of the file would actually be outside
       the SDA area. */
    _SDA2_BASE_ = . + 0x8000;
    __SDATA2_START__ = . ;

    /* Small, uninitialized data sections for kernel and trusted I/O driver code. */
    ld_sbss2OSStart = ABSOLUTE(.);
    *_OS_*.o(.sbss2)
    *_OS_*.o(.sbss2.*)
    *(.sbss2.OS)
    *(.sbss2.OS.*)
    ld_sbss2OSEnd = ABSOLUTE(.);

} >memData

.sdata2 : ALIGN(<mpuAlign()>)
{
    /* Small data sections for kernel and trusted I/O driver code. */
    . = ALIGN(<mpuAlign()>);
    ld_sdata2OSStart = ABSOLUTE(.);
    *_OS_*.o(.sdata2)
    *_OS_*.o(.sdata2.*)
    *(.sdata2.OS)
    *(.sdata2.OS.*)
    . = ALIGN(<mpuAlign()>);
    ld_sdata2OSEnd = ABSOLUTE(.);

    <sheet.rowAry:sdata2Process()>
    /* No further input section filters must be placed down here: The filters for process
       P1 are very open and, effectively, they will place all the unparticular rest into
       process P1. Additional filters will not likely catch anything. */

    /* Our ROM to RAM copy routine in the startup code copies always 4 Byte at once.
       The end address of any area to copy should thus be a multiple of 4. */
    . = ALIGN(<initDataAlign()>);

} >memData AT>memFlash


>>



dataProcess(row) ::= <<
.data.<row.Process> : ALIGN(<mpuAlign()>)
{
    /* Data sections for process <row.Process>. */
    . = ALIGN(<mpuAlign()>);
    ld_data<row.Process>Start = ABSOLUTE(.);

    *_<row.Process>_*.o(.data)
    *_<row.Process>_*.o(.data.*)
    *(.data.<row.Process>)
    *(.data.<row.Process>.*)

    <row.data>

    /* Our ROM to RAM copy routine in the startup code copies always 4 Byte at once.
       The end address of any area to copy should thus be a multiple of 4. */
    . = ALIGN(<initDataAlign()>);

} >memData AT>memFlash

.bss.<row.Process> (NOLOAD) : ALIGN(<mpuAlign()>)
{
    *_<row.Process>_*.o(.bss)
    *_<row.Process>_*.o(.bss.*)
    *(.bss.<row.Process>)
    *(.bss.<row.Process>.*)

    /* Stacks of process <row.Process>, one for each core . */
    . = ALIGN(8); /* Stacks need to be 8 Byte aligned.  */
    
    ld_stackStart<row.Process>Core2 = ABSOLUTE(.);
    . += ld_stackSize<row.Process>Core2;
    . = ALIGN(8);
    ld_stackEnd<row.Process>Core2 = ABSOLUTE(.);

    ld_stackStart<row.Process>Core1 = ABSOLUTE(.);
    . += ld_stackSize<row.Process>Core1;
    . = ALIGN(8);
    ld_stackEnd<row.Process>Core1 = ABSOLUTE(.);

    ld_stackStart<row.Process>Core0 = ABSOLUTE(.);
    . += ld_stackSize<row.Process>Core0;
    . = ALIGN(8);
    ld_stackEnd<row.Process>Core0 = ABSOLUTE(.);

    <row.bss>

    . = ALIGN(<mpuAlign()>);
    ld_data<row.Process>End = ABSOLUTE(.);

} >memData


>>



sdataProcess(row) ::= <<
/* Small data sections for process <row.Process>. */
. = ALIGN(<mpuAlign()>);
ld_sda<row.Process>Start = ABSOLUTE(.);

*_<row.Process>_*.o(.sdata)
*_<row.Process>_*.o(.sdata.*)
*(.sdata.<row.Process>)
*(.sdata.<row.Process>.*)

<row.sdata>

*_<row.Process>_*.o(.sbss)
*_<row.Process>_*.o(.sbss.*)
*(.sbss.<row.Process>)
*(.sbss.<row.Process>.*)

<row.sbss>

. = ALIGN(<mpuAlign()>);
ld_sda<row.Process>End = ABSOLUTE(.);


>>


sdata2Process(row) ::= <<
/* Small data sections for process <row.Process>. */
. = ALIGN(<mpuAlign()>);
ld_sda2<row.Process>Start = ABSOLUTE(.);

*_<row.Process>_*.o(.sdata2)
*_<row.Process>_*.o(.sdata2.*)
*(.sdata2.<row.Process>)
*(.sdata2.<row.Process>.*)

<row.sdata2>

*_<row.Process>_*.o(.sbss2)
*_<row.Process>_*.o(.sbss2.*)
*(.sbss2.<row.Process>)
*(.sbss2.<row.Process>.*)

*(.uncached.<row.Process>)
*(.uncached.<row.Process>.*)

<row.sbss2>

. = ALIGN(<mpuAlign()>);
ld_sda2<row.Process>End = ABSOLUTE(.);


>>

renderInitRAMAry(sheet) ::= <<
/*
 * This sub-ordinated linker script file builds a ROM table that contains the information
 * about the initialized RAM sections of the processes. The table is read by the startup
 * code in order to fill the RAM sections from their image in ROM.
 *   It has been generated from the information in spreadsheet <sheet.excelFile>, worksheet
 * <sheet.name_>.
 *
 * Copyright (C) 2017-<info.year> Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see \<http://www.gnu.org/licenses/>.
 */
LONG(ADDR(.data))
LONG(LOADADDR(.data))
LONG(SIZEOF(.data))

<sheet.rowAry:initRAMAryProcess()><\\>
LONG(ADDR(.sdata))
LONG(LOADADDR(.sdata))
LONG(SIZEOF(.sdata))

LONG(ADDR(.sdata2))
LONG(LOADADDR(.sdata2))
LONG(SIZEOF(.sdata2))


>>

initRAMAryProcess(row) ::= <<
LONG(ADDR(.data.<row.Process>))
LONG(LOADADDR(.data.<row.Process>))
LONG(SIZEOF(.data.<row.Process>))


>>