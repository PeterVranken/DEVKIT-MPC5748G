//
// attributeNames.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// The names of the user attributes are defined here. This file needs customization each
// time the code generation is used for set of DBC files with different definition of user
// attributes.
//
// Copyright (C) 2016-2020 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

import "symbols.stg"

// The attribute names required by the other templates:
//   sendMode: The frame based enumeration attribute, which selects one of the supported
// transmission modes, like periodic or on data change. The supported values strongly
// depend on the environment, which the CAN API is integrated in.
//   sendPeriod: The send period in ms of cyclic frames or event frames with cyclic
// fallback condition. The meaning depends on the supported transmission modes.
//   eventMinDistance: A timing constraint for data change frames. The meaning depends on
// the supported transmission modes.
//   chksumDataId: The data ID of the checksum computation. Effectively a kind a start
// value for the checksum computation. The meaning depends on the supported checksum
// algorithms. Caution: In this project, no CRC checksum handling is done and the attribute
// is ignored!
//   sigInitVal: The signal attribute stating the initial value of the signal. This
// value will be used in the CAN API until the frame, which the signal belongs to, is
// received the first time. For outbound signals, this value will be used until the APSW
// updates the API accordingly.
attribName ::= [ "sendMode": "frameSendMode"
               , "sendPeriod": "sendPeriod"
               , "eventMinDistance": "eventMinDistance"
               , "chksumDataId": "crcStartValue"
               , "sigInitVal": "initialValue"
               , default: "codeGenerationError_badAttributeName"
               ]

// The other templates access a user attribute's value through this dictionary. The value
// is not retrieved directly from the net object (which needs to be in scope) but
// indirectly through the other dictionary attribName: That dictionary can be easily
// customized, when the code generation needs to be applied to another environment with
// other attribute definitions.
attribVal ::= [ "sigInitVal": {<if(signal.isVoidScaling)><signal.attribMap.(attribName.sigInitVal).n; format="%.0f"><else><signal.attribMap.(attribName.sigInitVal).n><endif>}
              , "sendMode": {<symbol.enumSendMode>_<frame.attribMap.(attribName.sendMode)>}
              , "sendModeRegular": {<frame.attribMap.(attribName.sendMode).is.regular>}
              , "sendModeMixed": {<frame.attribMap.(attribName.sendMode).is.mixed>}
              , "sendModeEvent": {<frame.attribMap.(attribName.sendMode).is.event>}
              , "sendPeriod": {<frame.attribMap.(attribName.sendPeriod)>}
              , "eventMinDistance": {<frame.attribMap.(attribName.eventMinDistance)>}
              , "chksumDataId": {<frame.attribMap.(attribName.chksumDataId)>}
              , default: "codeGenerationError_badAttributeName"
              ]

// This is a helper to avoid the repeated use of lengthy template expressions. Template
// expression often have the form that a (deeply nested) element of the data structure
// yields a Boolean result and an <if()> expression is applied to decide code generation
// based on the expression's Boolean value.
//   A sub-template returns its result as a string. If we try to put the Boolean
// expression in a sub-template, like myBoolExpr() ::= "<lengthyExpression>", then the
// <if()> expression in the calling template fails: <if(myBoolExpr())> will always become
// true, for the same reason why <if("false")> will always be true; "false" is a string,
// not a null and not a Boolean false.
//   Dictionaries are an exception. While they normally agree in returning strings do they
// yet allow to return Boolean constants. If we use a dictionary to translate the strings
// of the Boolean values into Boolean values then an <if()> expression continues to work
// well; <if(isTrue.(myBoolExpr()))> does, what it is expected to do.
//   Note, the interpretation of the empty string as a Boolean false is required since many
// if not most Boolean queries return null rather than false, which is rendered as empty
// string.
isTrue ::= [ "true": true
           , "false": false
           , "": false
           , default: {<info.error.("isTrue got invalid argument. Check your template code")>}
           ]
isFalse ::= [ "true": false
            , "false": true
            , "": true
            , default: {<info.error.("isFalse got invalid argument. Check your template code")>}
            ]
