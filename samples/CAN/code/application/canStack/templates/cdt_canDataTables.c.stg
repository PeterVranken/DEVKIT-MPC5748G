//
// cdt_canDataTables.c.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// Generate the data tables, which form the database for the callbacks of the dispatchers.
// The information from the DBC files about messages is provided through these (constant)
// tables to the callback implementation.
//
// Copyright (C) 2017-2022 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

import "lib/iterations.stg"
import "lib/mod.stg"
import "attributes.stg"
import "symbols.stg"
import "globalInterface.stg"

moduleDescription() ::= <<
 * This module contains data tables, which contain all relevant information from the CAN
 * network database files about messages and signals. Mainly the callback functions of the
 * event dispatchers will access the tables to implement the message-indvidual behavior like
 * different timing patterns, different checksum protections, different size, etc.
>>


// This is one of the root templates; the complete C file is rendered.
//
dataTables_c(cluster,info) ::= <<
<! First put a file header with the reusable library template modC !>
<modC(["\n", moduleDescription()])>
<! The list of functions is put after the file frame shaped by modC !>
>>


// This is one of the root templates; the complete header file is rendered.
//
dataTables_h(cluster,info) ::= <<
<! First put a file header with the reusable library template modC !>
<modH(["\n", moduleDescription()])>
>>


@modH.includes() ::= <<
#include "<file.baseTypes_h>"
#include "<file.canApi_h>"
#include "cst_canStatistics.h"

>>


// Configure the templates mod.stg:modC/H, which shape the lists of included files.
@modC.includes() ::= <<
#include \<stdio.h>
#include \<stdlib.h>
#include \<string.h>
#include \<assert.h>

#include "<file.baseTypes_h>"
#include "<file.canApi_h>"
#include "can_canRuntime.h"
#include "cst_canStatistics.h"

>>

@modH.defines() ::= <<
>>

@modC.defines() ::= <<
>>

@modH.typedefs() ::= <<
/** The decription of a CAN message as required for implementation of its send/receive
    behavior in the callbacks of the event dispatchers. */
typedef struct cdt_canMessage_t
{
    /** Name of message. */
    const char *name;
    
    /** The CAN bus, which the reception event is simulated for. */
    unsigned int idxCanBus;

    /** Boolean information, whether \a canId designates an extended 29 Bit ID. */
    unsigned long isExtId;

    /** The CAN ID. */
    unsigned long canId;

    /** The size of the message contents in Byte. */
    unsigned int size;

    /** An external function, which is called to unpack a received CAN message into the
        global CAN API. */
    void (*fctUnpackApiMsg)(const uint8_t msgContentAry[]);

    /** An external function, which is called to pack the message. */
    void (*fctPackApiMsg)(uint8_t msgContentAry[]);

    /** The transmission timing pattern to be applied to the message. */
    <symbol.enumSendMode_t> sendMode;

    /** The index of the message in its particular group. A group are all messages, which are
        implemented by the same (hand-coded) handler in the CAN interface. The index
        supports easy and efficient implementation of handler owned, message related context
        data. */
    unsigned int idxHandlerCtxData;

    /** The pointer to the transmission info of the given message in the global CAN API. */
    <symbol.structInfoTransmission_t> *pInfoTransmission;

    /** The nominal cycle time in ms if the message is not purely event triggered. */
    unsigned int tiCycle;

    /** The minimum distance of reception events if the message is event triggered. */
    unsigned int tiMinDistance;

} cdt_canMessage_t;


/** The description of a CAN signal as required for the specific functionality of this
    applicatin: The user can select signals rather than messages for reception and sending. */
typedef struct cdt_canSignal_t
{
    /** Name of signal. */
    const char *name;

    /** Reference to containg CAN message: Index into table of all messages, either
        cdt_canRxMsgAry or cdt_canTxMsgAry. */
    unsigned int idxMsg;
    
    /** Reference to containg CAN message: Table of Rx or Tx messages? */
    <bt("bool_t")> isReceived;
    
    /** Getter for signal: Has a signal independent, generic prototype and allows to read
        the signal value from the global API as uniform type \a float. */
    float (*getter)(void);

    /** Setter for signal: Has a signal independent, generic prototype and allows to set
        the signal value in the global API. */
    void (*setter)(float newValue);

    /** The minimum physical value of the signal. */
    float min;
    
    /** The maximum physical value of the signal. */
    float max;
    
    /** The unit of the signal value. */
    const char *unit;

} cdt_canSignal_t;


>>

@modC.typedefs() ::= <<
>>

@modH.data() ::= <<
/** A global table with the description of all CAN messages which are received by the device.
    The description of the messages is as detailed as required for implementation of their
    send/receive behavior in the callbacks of the event dispatchers. */
extern const cdt_canMessage_t cdt_canRxMsgAry[CST_NO_CAN_MSGS_RECEIVED];

/** A global table with the description of all CAN messages which are sent by the device.
    The description of the messages is as detailed as required for implementation of their
    send/receive behavior in the callbacks of the event dispatchers. */
extern const cdt_canMessage_t cdt_canTxMsgAry[CST_NO_CAN_MSGS_SENT];

/** A global table with the description of all CAN signals as required for the specific
    functionality of this application: The user can select signals rather than messages for
    reception and sending. */
extern const cdt_canSignal_t cdt_canSignalAry[CST_NO_SENT_AND_RECEIVED_CAN_SIGNALS];

>>

@modC.data() ::= <<
/** A global table with the description of all CAN messages which are received by the device.
    The description of the messages is as detailed as required for implementation of their
    send/receive behavior in the callbacks of the event dispatchers. */
const cdt_canMessage_t cdt_canRxMsgAry[CST_NO_CAN_MSGS_RECEIVED] =
{<info.calc.idxCdtCanFrameAryEntry_set_1n><info.calc.idxCdtCanFrameAryEntry_sadd_1>
    <iteratePdusOfCluster(cluster,"received","canFrameAryEntry")><\\>
}; /* cdt_canRxMsgAry */

/** A global table with the description of all CAN messages which are sent by the device.
    The description of the messages is as detailed as required for implementation of their
    send/receive behavior in the callbacks of the event dispatchers. */
const cdt_canMessage_t cdt_canTxMsgAry[CST_NO_CAN_MSGS_SENT] =
{<info.calc.idxCdtCanFrameAryEntry_set_1n><info.calc.idxCdtCanFrameAryEntry_sadd_1>
    <iteratePdusOfCluster(cluster,"sent","canFrameAryEntry")><\\>
}; /* cdt_canTxMsgAry */

<verifyIdxRangeHandlerContextData()>

/** A global table with the description of all CAN signals as required for the specific
    functionality of this application: The user can select signals rather than messages for
    reception and sending. */
const cdt_canSignal_t cdt_canSignalAry[CST_NO_SENT_AND_RECEIVED_CAN_SIGNALS] =
{<info.calc.idxCdtCanFrameAryEntry_set_1n><info.calc.idxCdtCanFrameAryEntry_sadd_1>
    <iteratePdusOfCluster(cluster,"received","canSignalAryFrameEntry")><\\>
<info.calc.idxCdtCanFrameAryEntry_set_1n><info.calc.idxCdtCanFrameAryEntry_sadd_1>
    <iteratePdusOfCluster(cluster,"sent","canSignalAryFrameEntry")><\\>
}; /* cdt_canSignalAry */

>>

@modH.prototypes() ::= <<
>>

@modC.prototypes() ::= <<
>>


// This project makes use of hand-written event handlers for the processing of the messages.
// Usually, the handlers differ for in- and outbound messages and for the different
// transmission pattern. The implementation partly requires local data, like tick counters to
// implement the timing. To support the implementation of such a handler, we add an group
// index for each message; where a group bundles all messages being processed of one handler.
// This index permits to have simple access to compact, message-local data for each message.
//   The implementation of the template mainly is the conditional code required to assign
// each message to one of the groups or handlers. What it emits is just the index as a number
// literal.
idxHandlerContextData(pdu) ::= <<
<if(pdu.isReceived)><\\>
<if(isTrue.(attribVal.sendModeRegular))><info.calc.idxHdlCtxDataInRegular><\\>
<elseif(isTrue.(attribVal.sendModeEvent))><info.calc.idxHdlCtxDataInEvent><\\>
<elseif(isTrue.(attribVal.sendModeMixed))><info.calc.idxHdlCtxDataInMixed><\\>
<else><info.error.({<info.templateFile>: Unexpected value <attribVal.sendMode> found for message attribute <attribName.sendMode>})><\\>
<endif><\\>
<elseif(pdu.isSent)><\\>
<if(isTrue.(attribVal.sendModeRegular))><info.calc.idxHdlCtxDataOutRegular><\\>
<elseif(isTrue.(attribVal.sendModeEvent))><info.calc.idxHdlCtxDataOutEvent><\\>
<elseif(isTrue.(attribVal.sendModeMixed))><info.calc.idxHdlCtxDataOutMixed><\\>
<else><info.error.({<info.templateFile>: Unexpected value <attribVal.sendMode> found for message attribute <attribName.sendMode>})><\\>
<endif><\\>
<else><info.error.({<info.templateFile>: Unexpected transmission direction})><\\>
<endif>
>>

// Some protective code against inconsistencies of different templates. The counting above
// in idxHandlerContextData needs to be implemented in consistency with the message
// statistics implemented in cst_canStatistics.h.stg.
verifyIdxRangeHandlerContextData() ::= <<
#if (<info.calc.idxHdlCtxDataInRegular>) != CST_NO_CAN_MSGS_RECEIVED_REGULAR \
    ||  (<info.calc.idxHdlCtxDataInEvent>) != CST_NO_CAN_MSGS_RECEIVED_EVENT \
    ||  (<info.calc.idxHdlCtxDataInMixed>) != CST_NO_CAN_MSGS_RECEIVED_MIXED \
    ||  (<info.calc.idxHdlCtxDataOutRegular>) != CST_NO_CAN_MSGS_SENT_REGULAR \
    ||  (<info.calc.idxHdlCtxDataOutEvent>) != CST_NO_CAN_MSGS_SENT_EVENT \
    ||  (<info.calc.idxHdlCtxDataOutMixed>) != CST_NO_CAN_MSGS_SENT_MIXED
# error Invalid index ranges detected. Looks like an inconsistency in your code <\\>
        generation templates
#endif


>>


canFrameAryEntry(pdu) ::= <<
[<info.calc.idxCdtCanFrameAryEntry>] =
    { .name = "<frame.name>"
    , .idxCanBus = <define.busId>
    , .isExtId = <frame.isExtId>
    , .canId = <frame.id>
    , .size = <frame.size>
    , .fctUnpackApiMsg = <fct.unpackApiFrame>
    , .fctPackApiMsg = <fct.packApiFrame>
    , .sendMode = <attribVal.sendMode>
    , .idxHandlerCtxData = <idxHandlerContextData(pdu)>
    , .pInfoTransmission = &<define.referenceStructFrameSts>().<symbol.fieldInfoTransmission>
    , .tiCycle = <attribVal.sendPeriod>
    , .tiMinDistance = <attribVal.eventMinDistance>
    },<\n>
>>


canSignalAryFrameEntry(pdu) ::= <<
<iterateSignalsOfPdu(pdu,"all","both","canSignalAryEntry")><\\>
<info.calc.idxCdtCanFrameAryEntry_add_1>
>>

/// @todo Will we have an enumeration of signals rather than an index?
canSignalAryEntry(signal, kind) ::= <<
[<info.calc.idxCdtCanSignalAryEntry>] =
    { .name = "<symbol.signal>"
    , .idxMsg = <info.calc.idxCdtCanFrameAryEntry_get>
    , .isReceived = <frame.isReceived>
    , .getter = <symbol.signalGetter>
    , .setter = <symbol.signalSetter>
    , .min = <signal.min>
    , .max = <signal.max>
    , .unit = "<if(signal.unit)><signal.unit><endif>"
    },<\n>
>>


