//
// cap_canApi.c.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// The templates describe the generation of the data oriented CAN API with the APSW code.
// The integration of the API is supported by also generated pack and unpack functions, one
// such pair for each frame.
//
// See template moduleDescription for more details.
//
// Copyright (C) 2015-2021 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

// Override the dictionary of basic type names in the template library:
//   First import is the type map without a relative path. This makes StringTemplate look
// for the file in the directory of the importing group file -- prior to searching along
// the Java CLASSPATH. We can be sure that our local version has priority over the other
// one in the library folder in sample raceTechnology.
import "typeMap.stg"

import "lib/mod.stg"
import "lib/codeGenC.stg"
import "lib/iterations.stg"
import "attributes.stg"
import "symbols.stg"
import "globalInterface.stg"

moduleDescription() ::= <<
 * This file implements the data oriented CAN API between the APSW code and the upper
 * layers of the CAN stack. The global data structure is initialized with the initial
 * signal values from the CAN network database.\n
 *   The integration of the API with the CAN stack is supported by a set of pack and unpack
 * functions; one such pair of functions is available for each CAN frame. The pack function
 * composes the binary frame contents from the set of signal values found in the API and
 * the counterpart function (unpack) decomposes received binary frame content data into
 * distinct signal values, which are placed into the API.\n
 *   The functions are globally accessible; their names are composed such that name clashes
 * across different buses won't appear even if frames of same name and ID are
 * transmitted.\n
 *   Note, concurrency is not handled here. Particularly for CAN input, data reception and
 * decomposition of the frame contents into signals might be an asynchronous event. If so,
 * the caller of the unpack function would have to add appropriate code to implement mutual
 * exclusion with the Embedded Coder generated APSW code, which also accesses the API data.
 * Although less likely may the same hold for CAN output.
>>

// This is one of the root templates; the complete C file is rendered.
//
canApiDef(cluster, info) ::= <<
<! First put a file header with the reusable library template modC !>
<modC(["\n", moduleDescription()])>
<! The list of functions is put after the file frame shaped by modC !>
<iteratePdusOfCluster(cluster,"both","packUnpackFct")>
>>

// This is the other root template; the complete C header file is rendered.
//
canApiDecl(cluster, info) ::= <<
<! All code is shaped by overloading the regions of the template modH, see below !>
<modH([ "Declaration of API and pack/unpack functions for the CAN frames of cluster\n"
      , " * ", cluster.name, "."])>
>>

// Configure the template mod.stg:modC, which shapes the list of included files.
@modC.includes() ::= <<
#include \<string.h>
#include \<assert.h>

#include "<file.baseTypes_h>"

>>


// Configure the template mod.stg:modC, which shapes the file frame contents: The local
// defines.
@modC.defines() ::= <<
/* Check the values of the frame and special signal related #define's. Compilation errors
   can occur due to incompatibilites between the code generation templates and the actual
   network databases. */
#define <file.mnmApi; format="upper">_INCLUDES_PRECO_CHECKS
#include "<file.canApiPreco_h>"

>>


// In this sample of a CAN interface the API with the APSW is modeled as a large set of
// global structs, one for each frame. The struct contains a list of signals as members
// plus a status variable (related to the transmission of the frame). All of these structs
// are bundled in an embracing CAN bus related struct. One global object of this type
// exists for each CAN bus.
//   The struct definitions are added to the generated code by modifying the according
// place holder in the module frame template.
@modC.data() ::= <<
<listOfStructBusDefs(cluster)>
>>

// Configure the template mod.stg:modH, which shapes the list of included files.
@modH.includes() ::= <<
#include "<file.baseTypes_h>"

>>


// Configure the template mod.stg:modH, which shapes the header file frame contents: Some
// the compile configuration controlling defines plus many frame and signal related defines.
@modH.defines() ::= <<
#ifndef <MNM()>UNCONDITIONALLY_GENERATE_PACK_FCTS
/** Normally, a pack function is generated for sent frames only. If this define is set to a
    value other than 0 then a pack function is generated for received Frames, too. */
# define <MNM()>UNCONDITIONALLY_GENERATE_PACK_FCTS 0
#endif

#ifndef <MNM()>UNCONDITIONALLY_GENERATE_UNPACK_FCTS
/** Normally, an unpack function is generated for received Frames only. If this define is set
    to a value other than 0 then an unpack function is generated for sent Frames, too. */
# define <MNM()>UNCONDITIONALLY_GENERATE_UNPACK_FCTS 0
#endif<\n>

<! <iterateBusesOfCluster(cluster,"definesBus")> !>
<iteratePdusOfCluster(cluster,"both","definesPduProperties")>
<iterateSignalsOfCluster(cluster,"all","all","definesSignalScaling")>

>>


// Configure the template mod.stg:modH, which shapes the header file frame contents: The
// type definitions for frames and buses.
@modH.typedefs() ::= <<

/** The enumeration of supported message send patterns. */
typedef enum <symbol.enumSendMode_t>
{
    <first(cluster.busAry).attribDefMap.(attribName.sendMode).enumValAry:{val|<symbol.enumSendMode>_<val.name> = <val.i0>}; separator=", ", wrap="\n      ">
} <symbol.enumSendMode_t>;

<typedefStsTransmission()>
<listOfTypedefsStructFrameAndBus(cluster)>
>>


// The global data interface as customization of the header file template: The list of
// external data declarations.
@modH.data() ::= <<
<listOfStructBusDecls(cluster)>
>>


// The global function interface as customization of the header file template: The list of
// prototypes of the pack and unpack functions.
@modH.prototypes() ::= <<
<iteratePdusOfCluster(cluster,"both","packFctDecl")>
>>


definesBus(bus) ::= <<
/** The index or ID of CAN bus <bus>. */
#ifndef <define.busId>
# define <define.busId> <info.calc.idxCanBus>
#endif

>>


// Some defines for a signal, which make its scaling globally accessible.
definesSignalScaling(signal,kind) ::= <<
<if(!signal.isVoidScaling)>
/** Convert the binary value of signal <signal> of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus> into the world value. */
#define <define.signalBinToDbl>(bin) \
            ((double)(bin)<if(!signal.isVoidFactor)>*<define.signalFactor><endif><if(!signal.isVoidOffset)>+<define.signalOffset><endif>)

/** Convert the world value of signal <signal> of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus> into the binary value as
    transmitted via the CAN interface. */
#define <define.signalDblToBin>(dbl) \
            ((<bt(signal.type)>)(<if(!(signal.isVoidOffset||signal.isVoidFactor))>(<endif>(dbl)<if(!signal.isVoidOffset)>-<define.signalOffset><endif><if(!(signal.isVoidOffset||signal.isVoidFactor))>)<endif><if(!signal.isVoidFactor)>/<define.signalFactor><endif>))

/** The gain factor of the scaling of signal <signal> of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus>. */
#define <define.signalFactor><\t>(<signal.factor>)

/** The offset of the scaling of signal <signal> of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus>. */
#define <define.signalOffset><\t>(<signal.offset>)

<endif>
/** The minimum of the world value of signal <signal> of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus>. */
#define <define.signalMin><\t>(<if(!signal.isVoidScaling)><signal.min><else><signal.min; format="%.0f"><endif>)

/** The maximum of the world value of signal <signal> of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus>. */
#define <define.signalMax><\t>(<if(!signal.isVoidScaling)><signal.max><else><signal.max; format="%.0f"><endif>)<\n>

>>


// We need a list of defines related to the frame/PDU, which make some numeric properties
// easily available to the generated C code without introducing meaningless literals in the
// code.
definesPduProperties(pdu) ::= <<
/** Provide read/write access to the frame API struct, which bundles the set of signals of
    frame <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus> with the
    transmission status information. The referenced struct is a nested sub-element of the
    large the CAN bus describing struct <symbol.structBus>. */
#define <define.referenceStructFrameSts>() \
            (<symbol.structBus>.<symbol.structFrameSts>)

/** Provide read/write access to the frame API struct, which bundles the signals of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus>. The referenced struct is
    a nested sub-element of the large the CAN bus describing struct <symbol.structBus>. */
#define <define.referenceStructFrame>() \
            (<symbol.structBus>.<symbol.structFrameSts>.<symbol.fieldSignals>)

/** Provide read/write access to a field of the struct, which bundles the signals of frame
    <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus>. This struct is a nested
    sub-element of the large the CAN bus describing struct <symbol.structBus>. */
#define <define.referenceSignalOfStructFrame>(signalName) \
            (<symbol.structBus>.<symbol.structFrameSts>.<symbol.fieldSignals>.signalName)

/** The size in Byte of frame <frame> (<frame.id>, <frame.id;format="0x%03x">) on bus <bus>. */
#define <define.pduSize><\t><pdu.size>

<if(pdu.specialSignalMap.checksum)>
/** The size in Bit of checksum signal of frame <frame> (<frame.id>, <frame.id;format="0x%03x">)
    on bus <bus>. */
#define <define.checksumLength><\t><pdu.specialSignalMap.checksum.length>

/** The start bit of checksum signal of frame <frame> (<frame.id>, <frame.id;format="0x%03x">)
    on bus <bus>. */
#define <define.checksumStartBit><\t><pdu.specialSignalMap.checksum.startBit>

/** The endianness of checksum signal of frame <frame> (<frame.id>, <frame.id;format="0x%03x">)
    on bus <bus>. */
#define <define.checksumIsMotorola><\t><pdu.specialSignalMap.checksum.isMotorola>

/** The data ID of checksum signal of frame <frame> (<frame.id>, <frame.id;format="0x%03x">)
    on bus <bus>. */
#define <define.checksumDataId><\t><pdu.attribMap.(attribName.chksumDataId)>

<endif>
<if(pdu.specialSignalMap.SQC)>
/** The size in Bit of the sequence counter of frame <frame> (<frame.id>, <frame.id;format="0x%03x">)
    on bus <bus>. */
#define <define.sqcLength><\t><pdu.specialSignalMap.SQC.length>

/** The minmum value of the sequence counter of frame <frame> (<frame.id>, <frame.id;format="0x%03x">)
    on bus <bus>. */
#define <define.sqcFrom><\t><pdu.specialSignalMap.SQC.min; format="%.0f">

/** The maximum value of the sequence counter of frame <frame> (<frame.id>, <frame.id;format="0x%03x">)
    on bus <bus>. */
#define <define.sqcTo><\t><pdu.specialSignalMap.SQC.max; format="%.0f">

<endif>
>>



// A (un)pack function pair of prototypes.
packFctDecl(pdu) ::= <<
<if(!pdu.isSent)>
#if <MNM()>UNCONDITIONALLY_GENERATE_PACK_FCTS != 0
<endif>
/** Pack the signal values of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">)
    into a byte array of <pdu.size> Byte. The signal values are read from the global interface
    struct <symbol.structBus>.<symbol.structFrameSts>. */
void <fct.packApiFrame>(<bt("uint8_t")> <msgAry()>[]);

/** Pack the signal values of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">)
    into a byte array of <pdu.size> Byte. The signal values are read from a frame by reference. */
void <fct.packFrame>
                ( <bt("uint8_t")> <msgAry()>[]
                , const <symbol.structFrame_t> *pFrameStruct
                );
<if(!pdu.isSent)>#endif<endif>

<if(!pdu.isReceived)>
#if <MNM()>UNCONDITIONALLY_GENERATE_UNPACK_FCTS != 0
<endif>
/** Unpack the signals of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">) from
    a byte array of <pdu.size> Byte. The signal values are written into the global interface struct
    <symbol.structFrameSts>. */
void <fct.unpackApiFrame>(const <bt("uint8_t")> <msgAry()>[]);

/** Unpack the signals of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">) from
    a byte array of <pdu.size> Byte. The signal values are written into a frame struct by
    reference. */
void <fct.unpackFrame>
                ( <symbol.structFrame_t> *pFrameStruct
                , const <bt("uint8_t")> <msgAry()>[]
                );
<if(!pdu.isReceived)>
#endif
<endif>
<\n>
>>


// A PDU is rendered as pair of pack and unpack function for its signal set.
packUnpackFct(pdu) ::= <<
<if(!pdu.isSent)>
#if <MNM()>UNCONDITIONALLY_GENERATE_PACK_FCTS != 0
<endif>
/**
 * Pack the signals of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus.name>
 * into a byte array of <pdu.size> Byte.\n
 *   The signal values are read from the global interface struct
 * <symbol.structBus>.<symbol.structFrameSts>.
 *   @param <msgAry()>
 * The byte array. The packed signal values will be found in this array after return.
 * Unused bits will be set to zero.
 */
void <fct.packApiFrame>(<bt("uint8_t")> <msgAry()>[])
{
    <fct.packFrame>
            ( &<msgAry()>[0]
            , /* pFrameStruct */ &<define.referenceStructFrame>()
            );
} /* End of <fct.packApiFrame> */




/**
 * Pack the signals of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus.name>
 * into a byte array of <pdu.size> Byte.\n
 *   The signal values are read from a frame struct by reference.
 *   @param pFrameStruct
 * The signal values to pack are read from the interface struct * \a pFrameStruct, which
 * models frame <frame>.
 *   @param <msgAry()>
 * The byte array. The packed signal values will be found in this array after return.
 * Unused bits will be set to zero.
 */
void <fct.packFrame>
                    ( <bt("uint8_t")> <msgAry()>[]
                    , const <symbol.structFrame_t> *pFrameStruct
                    )
{
    <setPduDataAreaNull(pdu)>

    <pdu.signalAry:packSignal(pdu,{pFrameStruct-><symbol.signal>}); separator="\n"><\\>
<if(pdu.muxSelector)>
    <pdu.muxSelector:packSignal(pdu,{pFrameStruct-><cMuxSelectorName()>})>
    /* Pack the selected set of multiplexed signals. */
    switch(pFrameStruct-><cMuxSelectorName()>)
    {
    <pdu.muxSignalSetAry:casePackMuxSignalSet()>
    default: assert(1==0); // Undefined mux selector value encountered
    }
<endif>
} /* End of <fct.packFrame> */
<if(!pdu.isSent)>
#endif
<endif>



<if(!pdu.isReceived)>
#if <MNM()>UNCONDITIONALLY_GENERATE_UNPACK_FCTS != 0
<endif>
/**
 * Unpack the signals of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus.name>
 * from a byte array of <pdu.size> Byte.\n
 *   The unpacked signal values are written into the global interface struct
 * <symbol.structBus>.<symbol.structFrameSts>, which models frame <frame>.
 *   @param <msgAry()>
 * The byte array. The signal values are extracted from this array.
 */
void <fct.unpackApiFrame>(const <bt("uint8_t")> <msgAry()>[])
{
    <fct.unpackFrame>
            ( /* pFrameStruct */ &<define.referenceStructFrame>()
            , &<msgAry()>[0]
            );
} /* End of <fct.unpackApiFrame> */



/**
 * Unpack the signals of <direction(pdu)> PDU <pdu.name> (<frame.id>, <frame.id; format="0x%03x">) on bus <bus.name>
 * from a byte array of <pdu.size> Byte.\n
 *   @param pFrameStruct
 * The unpacked signal values are written into the interface struct * \a pFrameStruct,
 * which models frame <frame>.
 *   @param <msgAry()>
 * The byte array. The signal values are extracted from this array.
 */
void <fct.unpackFrame>
                    ( <symbol.structFrame_t> *pFrameStruct
                    , const <bt("uint8_t")> <msgAry()>[]
                    )
{
    /* Decode all normal, not multiplexed signals. */
    <pdu.signalAry:unpackSignal()>
<if(pdu.muxSelector)>
    /* Decode the multiplex selector signal. */
    <pdu.muxSelector:unpackSignal()>
    /* Decode the selected set of multiplexed signals. */
    switch(pFrameStruct-><cMuxSelectorName()>)
    {
    <pdu.muxSignalSetAry:caseUnpackMuxSignalSet()>
    default: assert(1==0); // Undefined mux selector value encountered
    }
<endif>
} /* End of <fct.unpackFrame> */
<if(!pdu.isReceived)>
#endif
<endif>




>> // End of template packUnpackFct


// Apply the assignment unpackSignal of a signal value to the related global interface
// variable for all conditionally decoded signals from a multiplexed signal set.
caseUnpackMuxSignalSet(ss) ::= <<
case <ss.muxValue>:
    <ss.signalAry:unpackSignal()>
    break;<\n>
>>


// A signal is unpacked and the value is assigned to the related global interface variable.
//   Remark: The handling of user option suppressUnaffectedSignals is somewhat undefined
// for the generation of unpack functions for outbound PDUs: The signal property
// isReceived will generally be false, which means for suppressUnaffectedSignals=true to
// not unpack the signal. But if we follow this what would be the value of an unpack
// function then? Usually, such a function is barely useful in final production code to
// fulfill functional needs but it might be helpful for testing code, where inverse
// functions are required. As a workaround and to support those test situations we do not
// filter signals for unpacking in case of outbound PDUs.
unpackSignal(signal) ::= <<
<if(!info.optionMap.suppressUnaffectedSignals || signal.isReceived || pdu.isSent)>
pFrameStruct-><symbol.signal> =
    <extractSignal(signal)>;
<endif>
>>


// Apply the pack operation for all conditionally encoded signals of a multiplexed signal set.
casePackMuxSignalSet(ss) ::= <<
case <ss.muxValue>:
    <ss.signalAry:packSignal(pdu,{pFrameStruct-><symbol.signal>}); separator="\n">
    break;<\n>
>>


// Similar to <symbol.signal> but specifically for the multiplex selector signal (if any).
// (<symbol.signal> can't be used directly as it makes use of attribute name scoping to
// access the signal.)
cMuxSelectorName() ::= <<
<pdu.muxSelector:{signal|<symbol.signal>}>
>>


// A string telling the direction of transmission of a frame or a PDU.
direction(pdu) ::= "<if(pdu.isSent)>outbound<elseif(pdu.isReceived)>inbound<else>unused<endif>"

