//
// initEcBusObjects.m.stg
// This is a template group file for StringTemplate V4, see www.stringtemplate.org.
//
// This template is used to generate the M code, which initializes a Simulink Bus object
// and and some auxiliary Simulink Signal objects for each CAN bus. If this code is
// executed in a MATLAB session then objects are created in the global workspace. By
// attaching these objects to the in- and outports and signal lines of the Simulink model
// will the Embedded Code generate code from the model, which directly links to our data
// oriented CAN API generated with the other templates in this folder.
//
// Copyright (C) 2016 Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by the
// Free Software Foundation, either version 3 of the License, or any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
// for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

delimiters "<", ">"

import "lib/iterations.stg"
import "globalInterface.stg"
import "symbols.stg"

simulinkBusObjects(cluster,info) ::= <<
% MATLAB script <info.output.Name>
% 
% This file implements the MATLAB readable specification of the data oriented CAN API
% between the Embedded Coder generated APSW code and the upper layers of the CAN stack. The
% specification is understood by the Embedded Coder and makes it generate code that
% directly links to the CAN API.
%   MATLAB reads this script as initialization of the Simulink model. A number of Simulink
% objects is created in the global workspace, which can be attached to a Simulink model in
% order to configure the code generation from this model with the Embedded Coder. The
% following objects are created:
%   A Simulink.Bus object is offered for each CAN bus. All signals from this bus are
% contained, which are either received or transmitted by the network node the software is
% running on. The bus is structured, each frame forms a sub-bus with transmission status
% and a collection of its signals.
%   This object is intended for an inport of the model. The model gets a non virtual
% inbound signal bus, which provides access to all received signals and to the transmission
% status of all received and sent frames. Furthermore, the sent signals could be read back
% if appropriate.
%   A Simulink.Signal object is generated for each CAN bus. The object should be attached to
% the non virtual inbound bus. The Embedded Coder is now aware of how to access the global
% C struct, which implements the CAN API.
%   Two Simulink.Bus objects are created for each frame. The object with name pattern
% *_sts_t holds the transmission status of the frame plus the other Simulink.Bus object.
% The other object contains all the signals of the frame. The signals are specified with
% name, C data type and scaling information. The latter makes the signals usable in the
% Simulink model without any ado; the Embedded Coder will take all appropriate actions to
% align the scalings of interconnected signals.
%   A Simulink.Signal object is generated for each frame. It specifies the access to the
% C struct, which collects the signals of the given frame and which is nested inside the C
% CAN bus struct.
%   The frame related Simulink.Bus object with the collection of signals and the frame
% related Simulink.Signal object are intended to implement CAN output in the Simulink
% model. (The other frame related Simulink.Bus objects are required to build up the CAN bus
% related Simulink.Bus object.) It is not possible to do this via a complete CAN bus
% related Simulink.Bus object because the Embedded Coder demands to set all signals of a
% bus; providing a value only to a sub-set is not possible. For all frames to be sent by
% the model put a bus creator (non virtual) and an outport into the model. Attach the
% Simulink.Bus object (the one without _sts in its name) to both the Simulink blocks and
% attach the Simulink.Signal object to the line interconnecting them. The signals fed into
% the bus creator will be directly written into the rights fields of the deeply nested
% global C struct, which represents the CAN bus.
%   The generated objects have names, which depend on bus and the frame's CAN ID to avoid
% ambiguities. The Simulink.Bus objects, which specify C data types, have a name ending
% with _t.
%
% This file has been generated with <info.application> version <info.version>,
% see http://sourceforge.net/projects/comframe/
%
% Copyright (C) <info.year> Peter Vranken (mailto:Peter_Vranken@Yahoo.de)
%
% This program is free software: you can redistribute it and/or modify it
% under the terms of the GNU Lesser General Public License as published by the
% Free Software Foundation, either version 3 of the License, or any later
% version.
%
% This program is distributed in the hope that it will be useful, but WITHOUT
% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
% FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
% for more details.
%
% You should have received a copy of the GNU Lesser General Public License
% along with this program. If not, see \<http://www.gnu.org/licenses/>.

<iterateBusesOfCluster(cluster,"busObj_canBus")>
>>

// Generate the Simulink.Bus object for a single CAN bus.
busObj_canBus(bus) ::= <<
<iterateFramesOfBus(bus,"both","busObj_frame")><\\>

% Once we have the array of all frame related bus objects of this bus we can assemble the
% array of bus elements for the CAN bus related Bus object.
tmp_busElementAry = repmat(Simulink.BusElement, 0, 1);
<iterateFramesOfBus(bus,"both","busElem_canBusObj")><\\>

% Once we have the array of frame related bus elements we can assemble the bus object for
% the complete CAN bus <bus>.
<symbol.busObjBus> = Simulink.Bus;
<symbol.busObjBus>.Description = 'CAN bus <bus>';
<symbol.busObjBus>.HeaderFile = '<file.canApi_h>';
<symbol.busObjBus>.Elements = tmp_busElementAry;
clear tmp_busElementAry<\n>

% Create a signal object, which can be attached to the CAN bus <bus> related, inbound,
% nonvirtual Simulink bus. An inport, which is configured this way can be connected to a
% Simulink bus selector block. Any field from the nested struct can be selected and direct
% access code will be generated.
<symbol.sigObjBus> = Simulink.Signal;
<symbol.sigObjBus>.RTWInfo.StorageClass='ImportedExtern';
<symbol.sigObjBus>.RTWInfo.Alias='<symbol.structBus>';
<symbol.sigObjBus>.Description = ...
  ['The externally initialized nested struct, which specifies all elements of CAN bus <bus>'];
>>


// A bus element of the top level bus object, the CAN bus object. An element relates to the
// frame plus frame status.
busElem_canBusObj(frame) ::= <<
tmp_busElementAry(end+1,1) = Simulink.BusElement;
tmp_busElementAry(end,1).Name = '<symbol.structFrameSts>';
tmp_busElementAry(end,1).DataType = '<symbol.busObjFrameSts>';<\n>
>>


// Generate M code to assemble a frame or PDU describing Simulink bus object, which can be
// used as bus element in an embedding bus object.
//   Actually, two bus objects are created: The inner one, which only bundles the signals
// of the frame and the it embedding, outer one, which adds the frame related status word.
busObj_frame(frame) ::= <<
% Create the bus elements of the Simulink Bus object, which describes the inner frame
% related struct <frame> (<frame.id>, <frame.id;format="0x%03x">). The bus elements represent
% the signals of the frame.
tmp_busElementAry = repmat(Simulink.BusElement, 0, 1);
<iterateSignalsOfFrame(frame,"all","all","signalBusElement")><\\>
% Create the Simulink Bus object, which describes frame
% <frame> (<frame.id>, <frame.id;format="0x%03x">) (here without transmission status).
<symbol.busObjFrame> = Simulink.Bus;
<symbol.busObjFrame>.Description = ...
  ['CAN bus <bus>, <direction(frame)> message <frame> (<frame.id>,' ...
   ' <frame.id;format="0x%03x">)'];
<symbol.busObjFrame>.HeaderFile = '<file.canApi_h>';
<symbol.busObjFrame>.Elements = tmp_busElementAry;
clear tmp_busElementAry

% Create the outer frame related struct (signals plus transmission status) of frame
% <frame> (<frame.id>, <frame.id;format="0x%03x">).
tmp_busElementAry = repmat(Simulink.BusElement, 0, 1);
tmp_busElementAry(1) = Simulink.BusElement;
tmp_busElementAry(1).Name = '<symbol.fieldSignals>';
tmp_busElementAry(1).DataType = '<symbol.busObjFrame>';
tmp_busElementAry(2) = Simulink.BusElement;
tmp_busElementAry(2).Name = '<symbol.fieldStsTransmission>';
tmp_busElementAry(2).DataType = 'uint8';
<symbol.busObjFrameSts> = Simulink.Bus;
<symbol.busObjFrameSts>.Description = ...
  ['CAN bus <bus>, signals and transmission status of frame <frame> (<frame.id>,' ...
   ' <frame.id;format="0x%03x">)'];
<symbol.busObjFrameSts>.HeaderFile = '<file.canApi_h>';
<symbol.busObjFrameSts>.Elements = tmp_busElementAry;
clear tmp_busElementAry

% Create a signal object, which can be attached to a frame based, outbound Simulink bus. An
% outport, which is configured this way will directly access the inner, frame related
% struct, that only holds the signals of the particular, <direction(frame)> frame
% <frame> (<frame.id>, <frame.id;format="0x%03x">)
<symbol.sigObjFrame> = Simulink.Signal;
<if(info.optionMap.useStorageClassImportedExternPointer)>
<symbol.sigObjFrame>.RTWInfo.StorageClass='ImportedExternPointer';
<symbol.sigObjFrame>.RTWInfo.Alias='<symbol.ptrToStructFrame>';
<symbol.sigObjFrame>.Description = ...
  ['An externally initialized, constant pointer to the external struct describing the' ...
   ' <direction(frame)> frame <frame> (<frame.id>, <frame.id;format="0x%03x">).' ...
   ' Via this pointer the frame''s signals can be accessed'];

<elseif(info.optionMap.useStorageClassGetSet)>
<!-- This code fails in practice. The sample was made with MATLAB 2009a and in this
     revision does the Embedded Coder fail to use the custom storage class GetSet for
     structs: It truncates the names of the addressed fields, the very last character is
     always missing.
       Most likely, this variant of the signal object will work with more recent revisions
     of MATLAB. --!>
<symbol.sigObjFrame>.RTWInfo.StorageClass = 'Custom';
<symbol.sigObjFrame>.RTWInfo.CustomStorageClass = 'GetSet';
<symbol.sigObjFrame>.RTWInfo.CustomAttributes.HeaderFile = '<file.canApi_h>';
<symbol.sigObjFrame>.RTWInfo.CustomAttributes.GetFunction = '<define.getFctFieldOfStructFrame>';
<symbol.sigObjFrame>.RTWInfo.CustomAttributes.SetFunction = '<define.setFctFieldOfStructFrame>';
<symbol.sigObjFrame>.Description = ...
  ['A pair of set/get methods to access a particular field of the external struct' ...
   ' describing the <direction(frame)> frame <frame> (<frame.id>,' ...
   ' <frame.id;format="0x%03x">). Via these functions can the frame''s signals be accessed'];

<elseif(info.optionMap.useStorageClassDefault)>
<symbol.sigObjFrame>.RTWInfo.StorageClass = 'Custom';
<symbol.sigObjFrame>.RTWInfo.CustomStorageClass = 'Default';
<symbol.sigObjFrame>.RTWInfo.Alias = '<define.aliasOfStructFrame>';
<symbol.sigObjFrame>.RTWInfo.CustomAttributes = SimulinkCSC.AttribClass_Simulink_Default;
<symbol.sigObjFrame>.Description = ...
  ['This signal object generates read/write access to the external struct' ...
   ' describing the <direction(frame)> frame <frame> (<frame.id>,' ...
   ' <frame.id;format="0x%03x">). The generated code to access a field f of the' ...
   ' struct expands to <define.aliasOfStructFrame>.f. Via this macro expression can' ...
   ' the frame''s signals be accessed'];

<!-- A final case with error message is not required, this is caught at another
     template location. --!>
<endif>
<\n>
>>


// The bus element of the frame bus struct: The description of a single signal.
signalBusElement(signal,kind) ::= <<
tmp_busElementAry(end+1,1) = Simulink.BusElement;
tmp_busElementAry(end,1).Name = '<symbol.signal>';
tmp_busElementAry(end,1).DataType = '<fixPtTypeMap.(signal.type)>';<\n>
>>


// A map is used to translate the C target type into the Embedded Coder fixed point object.
fixPtTypeMap ::=
[
    "bool_t"   : "boolean",
    "uint8_t"  : {<if(signal.isVoidScaling)>uint8<else>fixdt(0, 8,  <signal.factor>, <signal.offset>)<endif>},
    "uint16_t" : {<if(signal.isVoidScaling)>uint16<else>fixdt(0, 16, <signal.factor>, <signal.offset>)<endif>},
    "uint32_t" : {<if(signal.isVoidScaling)>uint32<else>fixdt(0, 32, <signal.factor>, <signal.offset>)<endif>},
    "uint64_t" : {<if(signal.isVoidScaling)>uint64<else>fixdt(0, 64, <signal.factor>, <signal.offset>)<endif>},
    "sint8_t"  : {<if(signal.isVoidScaling)>int8<else>fixdt(1, 8,  <signal.factor>, <signal.offset>)<endif>},
    "sint16_t" : {<if(signal.isVoidScaling)>int16<else>fixdt(1, 16, <signal.factor>, <signal.offset>)<endif>},
    "sint32_t" : {<if(signal.isVoidScaling)>int32<else>fixdt(1, 32, <signal.factor>, <signal.offset>)<endif>},
    "sint64_t" : {<if(signal.isVoidScaling)>int64<else>fixdt(1, 64, <signal.factor>, <signal.offset>)<endif>},
    "float32_t": "single",
    "float64_t": "double",
    default    : "InternalError_BadTypeName"
]


// Helper: A string telling the direction of transmission of a frame or a PDU.
direction(pdu) ::= "<if(pdu.isSent)>outbound<elseif(pdu.isReceived)>inbound<else>unused<endif>"
